{"version":3,"sources":["assets/js/tree-layout.js"],"names":["flatData","name","parent","treeData","d3","stratify","id","d","parentId","each","margin","top","right","bottom","left","width","height","treemap","tree","size","nodes","hierarchy","children","svg","select","append","attr","g","link","selectAll","data","descendants","slice","enter","y","x","node","style","text"],"mappings":"AAAA,GAAIA,YACAC,KAAQ,YAAaC,OAAU,OAC/BD,KAAQ,aAAcC,OAAU,cAChCD,KAAQ,aAAcC,OAAU,cAChCD,KAAQ,WAAYC,OAAU,eAC9BD,KAAQ,gBAAiBC,OAAU,eAInCC,SAAWC,GAAGC,WACfC,GAAI,SAASC,GAAK,MAAOA,GAAEN,OAC3BO,SAAU,SAASD,GAAK,MAAOA,GAAEL,SACjCF,SAGHG,UAASM,KAAK,SAASF,GACrBA,EAAEN,KAAOM,EAAED,IAIb,IAAII,SACFC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAEJC,MAAQ,IAAML,OAAOI,KAAOJ,OAAOE,MACnCI,OAAS,IAAMN,OAAOC,IAAMD,OAAOG,OAGnCI,QAAUb,GAAGc,OACdC,MAAOJ,MAAOC,SAGbI,MAAQhB,GAAGiB,UAAUlB,SAAU,SAASI,GAC1C,MAAOA,GAAEe,UAIXF,OAAQH,QAAQG,MAGhB,IAAIG,KAAMnB,GAAGoB,OAAO,QAAQC,OAAO,OAChCC,KAAK,QAASX,MAAQL,OAAOI,KAAOJ,OAAOI,MAC3CY,KAAK,SAAUV,OAASN,OAAOC,IAAMD,OAAOG,QAC3Cc,EAAIJ,IAAIE,OAAO,KAChBC,KAAK,YAAa,aAAehB,OAAOI,KAAO,KAAOJ,OAAOC,IAAM,KAGlEiB,KAAOD,EAAEE,UAAU,SACpBC,KAAMV,MAAMW,cAAcC,MAAM,IAChCC,QACAR,OAAO,QACPC,KAAK,QAAS,QACdA,KAAK,IAAK,SAASnB,GAClB,MAAO,IAAMA,EAAE2B,EAAI,IAAM3B,EAAE4B,EACvB,MAAQ5B,EAAE2B,EAAI3B,EAAEL,OAAOgC,GAAK,EAAI,IAAM3B,EAAE4B,EACxC,KAAO5B,EAAE2B,EAAI3B,EAAEL,OAAOgC,GAAK,EAAI,IAAM3B,EAAEL,OAAOiC,EAC9C,IAAM5B,EAAEL,OAAOgC,EAAI,IAAM3B,EAAEL,OAAOiC,IAItCC,KAAOT,EAAEE,UAAU,SACpBC,KAAKV,MAAMW,eACXE,QACAR,OAAO,KACPC,KAAK,QAAS,SAASnB,GACtB,MAAO,QAAUA,EAAEe,SAAW,kBAAoB,iBAEnDI,KAAK,YAAa,SAASnB,GAC1B,MAAO,aAAeA,EAAE2B,EAAI,KAAO3B,EAAE4B,EAAI,KAI7CC,MAAKX,OAAO,UACTC,KAAK,IAAK,IAGbU,KAAKX,OAAO,QACTC,KAAK,KAAM,SAASnB,GACnB,MAAOA,GAAEe,SAAW,OAAS,QAE9BI,KAAK,KAAM,SACXA,KAAK,IAAK,SAASnB,GAAK,MAAOA,GAAEe,UAAW,GAAM,KAClDe,MAAM,cAAe,SAAS9B,GAC7B,MAAOA,GAAEe,SAAW,MAAQ,UAE7BgB,KAAK,SAAS/B,GACb,MAAOA,GAAEuB,KAAK7B","file":"tree-layout.min.js","sourcesContent":["var flatData = [\n  { \"name\": \"Top Level\", \"parent\": null },\n  { \"name\": \"Level 2: A\", \"parent\": \"Top Level\" },\n  { \"name\": \"Level 2: B\", \"parent\": \"Top Level\" },\n  { \"name\": \"Son of A\", \"parent\": \"Level 2: A\" },\n  { \"name\": \"Daughter of A\", \"parent\": \"Level 2: A\" }\n];\n\n// convert the flat data into a hierarchy\nvar treeData = d3.stratify()\n  .id( function(d) { return d.name; } )\n  .parentId( function(d) { return d.parent; } )\n  (flatData);\n\n// assign the name to each node\ntreeData.each(function(d) {\n  d.name = d.id;\n});\n\n// set the dimensions and margins of the diagram\nvar margin = {\n  top: 20,\n  right: 90,\n  bottom: 30,\n  left: 90\n};\nvar width = 660 - margin.left - margin.right;\nvar height = 500 - margin.top - margin.bottom;\n\n// declares a tree layout and assigns the size\nvar treemap = d3.tree()\n  .size([ width, height ]);\n\n// assings the data to a hierarchy using parent-child relationships\nvar nodes = d3.hierarchy(treeData, function(d) {\n  return d.children;\n});\n\n// maps the node data to the tree layout\nnodes = treemap(nodes);\n\n// append the svg object to the body of the page\nvar svg = d3.select('body').append('svg')\n  .attr('width', width + margin.left + margin.left)\n  .attr('height', height + margin.top + margin.bottom);\nvar g = svg.append('g')\n  .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');\n\n// adds the links between the nodes\nvar link = g.selectAll('.link')\n  .data( nodes.descendants().slice(1) )\n  .enter()\n  .append('path')\n  .attr('class', 'link')\n  .attr('d', function(d) {\n    return 'M' + d.y + ',' + d.x\n      + ' C' + (d.y + d.parent.y) / 2 + ',' + d.x\n      + ' ' + (d.y + d.parent.y) / 2 + ',' + d.parent.x\n      + ' ' + d.parent.y + ',' + d.parent.x;\n  });\n\n// adds each node as a group\nvar node = g.selectAll('.node')\n  .data(nodes.descendants())\n  .enter()\n  .append('g')\n  .attr('class', function(d) {\n    return 'node' + (d.children ? ' node--internal' : ' node--leaf');\n  })\n  .attr('transform', function(d) {\n    return 'translate(' + d.y + ', ' + d.x + ')';\n  });\n\n// adds the circle to the node\nnode.append('circle')\n  .attr('r', 10);\n\n// adds the text to the node\nnode.append('text')\n  .attr('dx', function(d) {\n    return d.children ? '-5px' : '5px';\n  })\n  .attr('dy', '.35em')\n  .attr('x', function(d) { return d.children ? -13 : 13 })\n  .style('text-anchor', function(d) {\n    return d.children ? 'end' : 'start';\n  })\n  .text(function(d) {\n    return d.data.name;\n  });"],"sourceRoot":"SORUCE_DIR"}